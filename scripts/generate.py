import argparse
import random
from typing import List
from pathlib import Path
import uuid

from minsh.utils import save_fasta_file


def main(
    line_length: int,
    length: int,
    copies: int,
    output_prefix: str,
    alphabet: str,
    description: str,
    clobber: bool,
    output_directory: str,
):

    output_directory = Path(output_directory)
    output_directory.mkdir(parents=True, exist_ok=True)

    # Pick this length because it'll be more readable in the FS (arbitrary)
    uuid_prefix_len = 5
    output_prefix = (
        f"{uuid.uuid4()}"[:uuid_prefix_len] if output_prefix is None else output_prefix
    )
    assert len(output_prefix) > 0
    for l in length:
        for i in range(copies):
            sequence = "".join(random.choice(alphabet) for _ in range(l))
            output_file = output_directory / f"{output_prefix}_l{l}_v{i}.fa"
            if not clobber and output_file.exists():
                raise FileExistsError(f"{output_file} already exists.")
            save_fasta_file(output_file, description, sequence, line_length)
            print(f"Saved {output_file}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Generate random fasta files.")
    parser.add_argument(
        "--line-length",
        "-ll",
        type=int,
        default=100,
        help="The length of the lines in the fasta file.",
    )
    parser.add_argument(
        "--length",
        "-l",
        type=int,
        nargs="+",
        default=[100, 1_000, 10_000, 100_000],
        help="The length of the random sequence.",
    )
    parser.add_argument(
        "--copies",
        "-c",
        type=int,
        default=5,
        help="The number of copies of each length to generate.",
    )
    parser.add_argument(
        "--output-prefix", "-o-p", default=None, help="The output file name prefix."
    )
    parser.add_argument(
        "--alphabet",
        "-a",
        default="ACGT",
        help="The alphabet to use for the random sequence.",
    )
    parser.add_argument(
        "--description",
        "-d",
        default="Autogenerated",
        help="The description of the fasta file.",
    )
    parser.add_argument(
        "--clobber",
        "-clb",
        action="store_true",
        help="Overwrite the output file if it exists.",
    )
    parser.add_argument(
        "--output-directory",
        "-id",
        default="data",
        help="The directory to save the files in.",
    )

    args = parser.parse_args()
    main(
        args.line_length,
        args.length,
        args.copies,
        args.output_prefix,
        args.alphabet,
        args.description,
        args.clobber,
        args.output_directory,
    )
